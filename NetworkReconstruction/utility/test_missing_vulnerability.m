clear;
clc;
%Load the observed network
load("fb_graph.mat");
load("gold_psi.mat");
load("gold_p_k_est.mat")
load("gold_p_est.mat");



%Attack the network to get the sequence
%G = graph(adjacency_matrix);
adjacency_matrix = full(adjacency(G));
D = degree(G);
header_name = 'facebook';
%User panel
N = length(adjacency_matrix(1,:));
Burnin = 10001;
N_samples = 140000;
rng(3)
beta = 0;

k_opt = 12;
m_opt = 2;
alpha = 100;
loss_percentages = 0.01:0.01:0.20;

%P_est_sequence_name = sprintf('%s_est_P_est_sequence%d_burning_%d_samples_beta_%f.mat', header_name, Burnin, N_samples, beta);
%psi_name = sprintf('%s_psi_%d_burning_%d_samples_beta_%f.mat', header_name, Burnin, N_samples, beta);
%load(P_est_sequence_name);
%load(psi_name);
P_est_base=load('facebook_P_est_attack_819_loss_4096_nodes_alpha_100.mat')
P_est_base = P_est_base.P_est;
load('facebook_psi_sequence_attack_819_loss_4096_nodes_alpha_100.mat')

psi_base = psi_samples{10,15};

G_prps = MFNG_gen_v3(12,2, P_est);
G_base = MFNG_gen_v3(12,2, P_est_base);
prob_sequence_prps = zeros(1,length(loss_percentages));
prob_sequence_base = zeros(1,length(loss_percentages));
prob_sequence_true = zeros(1,length(loss_percentages));

for kk= 1:length(loss_percentages)
    %Attack the network
    kk
    loss_percentage = loss_percentages(kk);
    time_steps = floor(loss_percentage*N);
    [G_new, sequence, index_array, max_sequence, prob_sequence] = attack_model_v3(G, alpha, time_steps);
    prob_sequence_true(kk) = sum(log(prob_sequence));
    
    prob_sequence_temp = get_vulnerability(G_prps, alpha, sequence, psi);
    prob_sequence_prps(kk) = sum(log(prob_sequence_temp));
    
    prob_sequence_temp = get_vulnerability(G_base, alpha, sequence, psi_base);
    prob_sequence_base(kk) = sum(log(prob_sequence_temp));
end